{
  "hash": "fcaa02817c1880d68b01e69736527e1a",
  "result": {
    "markdown": "---\ntitle: \"Time Series Analysis\"\nsubtitle: \"Predicting Value of Unknown Variables\"\nauthor: \"Zach Palmore\"\ndate: \"2022-08-28\"\ncategories: [predictive, modeling, data science]\nimage: \"bullversusbear_image.svg\"\nformat:\n  html:\n    code-fold: true\n    code-tools: true\n    code-link: true\n    highlight-style: pygments\n    html-math-method: katex\n    df-print: paged\n    cache: true\n    theme:\n      light: flatly\n      dark: darkly\n---\n\n\n\n\nA good forecast is a blessing while the wrong forecast could prove to be dangerous\n\n## Introduction\n\nGiven an unknown data source with several groups, we attempt to predict the next 140 values of a times series data set based on 1622 entries provided on multiple events. Our predictions will be fine-tuned to reduce the mean absolute percentage error (MAPE) as much as possible. The packages we will be using and all associated code to produce the models can be found in the attached markdown file. The data with its first five rows, are shown below.  \n\n\n\n\n::: {.cell hash='arima_cache/html/unnamed-chunk-2_3f62647b13cec38924aee01000903691'}\n\n```{.r .cell-code}\n# Data source\ndata <- read.csv(\"https://raw.githubusercontent.com/palmorezm/msds/main/Predictive%20Analytics/Projects/Project1/project1data.csv\")\n# data <- data %>% \n#   rename(SeriesInd = ï..SeriesInd) \nhead(data, 5)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"\"],\"name\":[\"_rn_\"],\"type\":[\"\"],\"align\":[\"left\"]},{\"label\":[\"SeriesInd\"],\"name\":[1],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"group\"],\"name\":[2],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"Var01\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"Var02\"],\"name\":[4],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"Var03\"],\"name\":[5],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"Var05\"],\"name\":[6],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"Var07\"],\"name\":[7],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"40669\",\"2\":\"S03\",\"3\":\"30.64286\",\"4\":\"123432400\",\"5\":\"30.34\",\"6\":\"30.49\",\"7\":\"30.57286\",\"_rn_\":\"1\"},{\"1\":\"40669\",\"2\":\"S02\",\"3\":\"10.28000\",\"4\":\"60855800\",\"5\":\"10.05\",\"6\":\"10.17\",\"7\":\"10.28000\",\"_rn_\":\"2\"},{\"1\":\"40669\",\"2\":\"S01\",\"3\":\"26.61000\",\"4\":\"10369300\",\"5\":\"25.89\",\"6\":\"26.20\",\"7\":\"26.01000\",\"_rn_\":\"3\"},{\"1\":\"40669\",\"2\":\"S06\",\"3\":\"27.48000\",\"4\":\"39335700\",\"5\":\"26.82\",\"6\":\"27.02\",\"7\":\"27.32000\",\"_rn_\":\"4\"},{\"1\":\"40669\",\"2\":\"S05\",\"3\":\"69.26000\",\"4\":\"27809100\",\"5\":\"68.19\",\"6\":\"68.72\",\"7\":\"69.15000\",\"_rn_\":\"5\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\nWe create forecasts for two preselected variables within each of six predetermined groups. These groups are denoted S01, S02, S03, S04, S05, and S06 respectively. There are five variables within each group that we have to work with. They are Var01, Var02, Var03, Var05, and Var07 respectively. Our date variable ‘SeriesInd,’ is displayed in its numeric serial number form calculated with Excel. Although we do not know what the variables stand for, we can develop models to try and forecast their behavior. This chart contains a breakdown of which variables are forecast in each group.\n\n\n::: {.cell hash='arima_cache/html/unnamed-chunk-3_a2aee77d89dd2b17e2408e80fdb10628'}\n\n```{.r .cell-code}\n# Chart\nvarsbygroup <- data.frame(matrix(c(\"S01\", \"S02\", \"S03\",\n                                   \"S04\", \"S05\", \"S06\", \n                                   \"Var01\", \"Var02\", \"Var05\",\n                                   \"Var01\", \"Var02\", \"Var05\",\n                                   \"Var02\", \"Var03\", \"Var07\",\n                                   \"Var02\", \"Var03\", \"Var07\"),\n                                 nrow = 6, ncol=3))\ncolnames(varsbygroup) <- c(\"Group\", \"Variable1\", \"Variable2\")\nvarsbygroup %>% \n  kbl(booktabs = T) %>% \n  kable_styling(latex_options = c(\"striped\", \"HOLD_position\", \"scale_down\"), full_width = T)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table\" style=\"margin-left: auto; margin-right: auto;\">\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> Group </th>\n   <th style=\"text-align:left;\"> Variable1 </th>\n   <th style=\"text-align:left;\"> Variable2 </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> S01 </td>\n   <td style=\"text-align:left;\"> Var01 </td>\n   <td style=\"text-align:left;\"> Var02 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> S02 </td>\n   <td style=\"text-align:left;\"> Var02 </td>\n   <td style=\"text-align:left;\"> Var03 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> S03 </td>\n   <td style=\"text-align:left;\"> Var05 </td>\n   <td style=\"text-align:left;\"> Var07 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> S04 </td>\n   <td style=\"text-align:left;\"> Var01 </td>\n   <td style=\"text-align:left;\"> Var02 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> S05 </td>\n   <td style=\"text-align:left;\"> Var02 </td>\n   <td style=\"text-align:left;\"> Var03 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> S06 </td>\n   <td style=\"text-align:left;\"> Var05 </td>\n   <td style=\"text-align:left;\"> Var07 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n\n```{.r .cell-code}\n# Grouping\nS01 <- data %>% \n  filter(group == \"S01\")\nS02 <- data %>% \n  filter(group == \"S02\")\nS03 <- data %>% \n  filter(group == \"S03\")\nS04 <- data %>% \n  filter(group == \"S04\")\nS05 <- data %>% \n  filter(group == \"S05\")\nS06 <- data %>% \n  filter(group == \"S06\")\n\n# Imputation by function - missing something? lapply/sapply may work \nsoximp <- function(df){\n  for (i in colnames(df)){\n    if (sum(is.na(df[[i]])) !=0){\n      df[[i]][is.na(df[[i]])] <- median(df[[i]], na.rm=TRUE)\n    }\n  }\n}\n\n# Imputation loops for each group by median \nfor (i in colnames(S01)){\n  if (sum(is.na(S01[[i]])) != 0){\n    S01[[i]][is.na(S01[[i]])] <- median(S01[[i]], na.rm = TRUE)\n  } \n}\nfor (i in colnames(S02)){\n  if (sum(is.na(S02[[i]])) != 0){\n    S02[[i]][is.na(S02[[i]])] <- median(S02[[i]], na.rm = TRUE)\n  } \n}\nfor (i in colnames(S03)){\n  if (sum(is.na(S03[[i]])) != 0){\n    S03[[i]][is.na(S03[[i]])] <- median(S03[[i]], na.rm = TRUE)\n  } \n}\nfor (i in colnames(S04)){\n  if (sum(is.na(S04[[i]])) != 0){\n    S04[[i]][is.na(S04[[i]])] <- median(S04[[i]], na.rm = TRUE)\n  } \n}\nfor (i in colnames(S05)){\n  if (sum(is.na(S05[[i]])) != 0){\n    S05[[i]][is.na(S05[[i]])] <- median(S05[[i]], na.rm = TRUE)\n  } \n}\nfor (i in colnames(S06)){\n  if (sum(is.na(S06[[i]])) != 0){\n    S06[[i]][is.na(S06[[i]])] <- median(S06[[i]], na.rm = TRUE)\n  } \n}\n```\n:::\n\n\nBefore we begin, the data is filtered to extract each time series by group. This isolates the Var01, Var02, Var03, Var05, and Var07 variables associated with groups S01, S02, and so on. Then, with each group and its respective variables’ behavior isolated, we clean and adjust the data to make use of it in the analysis. Once we determine the most appropriate models to forecast the proper variable in each group, we evaluate the results of our predictions. Our final forecasts are captured in the excel spreadsheet attached. \n\n## Analysis\n\nWe began by addressing missing values. Given 10,572 observations, about 8% of each variable was missing. Several methods were tried to address this but the best were Kalman smoothing and simple imputation by the median of each ‘Var0X’ variable to fill in where appropriate. The ‘SeriesInd’ numeric date was also converted from its serial number form to a common date-time series. We then examined each group’s variables separately.\n\n\n::: {.cell hash='arima_cache/html/unnamed-chunk-4_27625962b2afd75c13c15d8b97fc1a5b'}\n\n```{.r .cell-code}\n# library(fpp2)\n\n#S01\nS01<-subset(data, group == \"S01\", select = c(SeriesInd, Var01, Var02))%>%\n  mutate(date=as.Date(SeriesInd, origin = \"1905-01-01\"))\nsummary(S01)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   SeriesInd         Var01           Var02               date           \n Min.   :40669   Min.   :23.01   Min.   : 1339900   Min.   :2016-05-07  \n 1st Qu.:41304   1st Qu.:29.85   1st Qu.: 5347550   1st Qu.:2018-01-31  \n Median :41946   Median :35.66   Median : 7895050   Median :2019-11-05  \n Mean   :41945   Mean   :39.41   Mean   : 8907092   Mean   :2019-11-03  \n 3rd Qu.:42586   3rd Qu.:48.70   3rd Qu.:11321675   3rd Qu.:2021-08-06  \n Max.   :43221   Max.   :62.31   Max.   :48477500   Max.   :2023-05-03  \n                 NA's   :142     NA's   :140                            \n```\n:::\n\n```{.r .cell-code}\n# Subset Var01 and Var02 from S01.\nS01_Var01<-S01 %>%select(Var01)\nS01_Var01<-S01_Var01[1:1625,]\n\n\nS01_Var02<-S01 %>%select(Var02)\nS01_Var02<-S01_Var02[1:1625,]\n\n\n#S02\nS02<-subset(data, group == \"S02\", select = c(SeriesInd, Var02, Var03))%>%\n  mutate(date=as.Date(SeriesInd, origin = \"1905-01-01\"))\nsummary(S02)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   SeriesInd         Var02               Var03            date           \n Min.   :40669   Min.   :  7128800   Min.   : 8.82   Min.   :2016-05-07  \n 1st Qu.:41304   1st Qu.: 27880300   1st Qu.:11.82   1st Qu.:2018-01-31  \n Median :41946   Median : 39767500   Median :13.76   Median :2019-11-05  \n Mean   :41945   Mean   : 50633098   Mean   :13.68   Mean   :2019-11-03  \n 3rd Qu.:42586   3rd Qu.: 59050900   3rd Qu.:15.52   3rd Qu.:2021-08-06  \n Max.   :43221   Max.   :480879500   Max.   :38.28   Max.   :2023-05-03  \n                 NA's   :140         NA's   :144                         \n```\n:::\n\n```{.r .cell-code}\n# Subset Var02 and Var03 from S02.\nS02_Var02<-S02 %>%select(Var02)\nS02_Var02<-S02_Var02[1:1625,]\n\n\nS02_Var03<-S02 %>%select(Var03)\nS02_Var03<-S02_Var03[1:1625,]\n\n\n\n#S03\nS03<-subset(data, group == \"S03\", select = c(SeriesInd, Var05, Var07))%>%\n  mutate(date=as.Date(SeriesInd, origin = \"1905-01-01\"))\nsummary(S03)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   SeriesInd         Var05            Var07             date           \n Min.   :40669   Min.   : 27.48   Min.   : 27.44   Min.   :2016-05-07  \n 1st Qu.:41304   1st Qu.: 53.30   1st Qu.: 53.46   1st Qu.:2018-01-31  \n Median :41946   Median : 75.59   Median : 75.71   Median :2019-11-05  \n Mean   :41945   Mean   : 76.90   Mean   : 76.87   Mean   :2019-11-03  \n 3rd Qu.:42586   3rd Qu.: 98.55   3rd Qu.: 98.61   3rd Qu.:2021-08-06  \n Max.   :43221   Max.   :134.46   Max.   :133.00   Max.   :2023-05-03  \n                 NA's   :144      NA's   :144                          \n```\n:::\n\n```{.r .cell-code}\n# Subset Var05 and Var07 from S03.\nS03_Var05<-S03 %>%select(Var05)\nS03_Var05<-S03_Var05[1:1625,]\n\n\nS03_Var07<-S03 %>%select(Var07)\nS03_Var07<-S03_Var07[1:1625,]\n```\n:::\n\n\n\n\nStatistical summaries, box plots, and histograms were run on each group to evaluate where the average value of each variable was, if its distribution was skewed, determine whether outliers were present, and provide other descriptors of the data. These informed us that the average value (mean) of the variables are similar but their range varies widely with Var05 at 186.01 while Var02 covers a range of 479 million. Our analysis solves this potential problem by focusing on variables of the same scales as the intended target.\n\n\n\n\n::: {.cell hash='arima_cache/html/unnamed-chunk-6_836de3a48c46be37c92f2b1a9d91ff6d'}\n\n```{.r .cell-code}\nsummary(S01_Var01)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  23.01   29.85   35.72   39.47   48.76   62.38 \n```\n:::\n\n```{.r .cell-code}\npar(mfrow = c(1,2))\nhist(ts_S01_Var01)\nboxplot(ts_S01_Var01)\n```\n\n::: {.cell-output-display}\n![](arima_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n\n```{.r .cell-code}\nautoplot(ts_S01_Var01)\n```\n\n::: {.cell-output-display}\n![](arima_files/figure-html/unnamed-chunk-6-2.png){width=672}\n:::\n:::\n\n\n\nAdditionally, all but group S03 of the histograms exhibited right skewness, and Var02 and Var03 had outliers. These were replaced using Friedman’s super smoothing method. Due to the randomness of these variables, determining outliers was difficult and there is a presence of additional overly influential points as determined using Cook's distance formula. We acknowledge the presence of these points but are unable to alter them as they are likely intentional based on the patterns in the data. For reference, the observations are shown in the scatter plot with color coding by each group. \n\n\n\n::: {.cell hash='arima_cache/html/unnamed-chunk-7_beb6c22858d2fbd07d84f47dc3d4a8f3'}\n\n```{.r .cell-code}\ndata[c(1:7)]%>%\n  gather(variable, value, -SeriesInd, -group) %>%\n  ggplot(., aes(value, SeriesInd, color = group)) + \n  geom_point(fill = \"white\",\n             size=1, \n             shape=21, \n             alpha = 0.75) + \n  coord_flip() + \n   facet_wrap(~variable, \n             scales =\"free\") + \n  labs(title = \"Variable Patterns\", \n       subtitle = \"Color Coded by Group\", \n       x=\"Value\", \n       y=\"Time\", \n       caption = \"Contains all non-null observations of the given data set\") +\n  theme_minimal() +\n  theme(plot.title = element_text(hjust=0.5), \n        plot.subtitle = element_text(hjust=0.5),\n        legend.position = \"bottom\", \n        axis.ticks.x=element_blank(),\n        axis.text.x=element_blank(), \n        plot.caption = element_text(hjust=0.5)\n        )\n```\n\n::: {.cell-output-display}\n![](arima_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\nSeasonality was also considered. It is possible this data follows a weak seasonal trend that increases during summer months but there is not a lot of evidence to support regular fluctuations. Regular gaps were noticed in the time series on a weekly basis and several methods were used in attempts to fix this. However, the data appears randomly distributed and as such, acts randomly. For this reason, we left the gaps alone and any further adjustments made were minimal to avoid disturbing any existing patterns in the data. \n\n\n\n\n\n\nWe determined that the best model type was an Auto Regressive Integrated Moving Average (ARIMA) with drift. Unfortunately, all variables required differencing to achieve stationarity. This indicates that any predictions made with these variables may be unrealistic because of inherent random changes in statistics like the mean and variance of these variables over time. We transform the data in our attempts to achieve stationarity but it should be noted that our review of stationarity is only a rough estimate using the aforementioned summary statistics so that we may apply this ARIMA method. Otherwise, we would have to conclude this data is inherently unpredictable and as such, render model forecasts useless. Rather, we focus on forecasting each variable individually and try to keep it simple.\n\n\n\n## Prediction\n\n\n\n\n::: {.cell hash='arima_cache/html/unnamed-chunk-10_079411bd007650fdbc0bc903e3b38ed2'}\n\n```{.r .cell-code}\nmape0101\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5.7693\n```\n:::\n\n```{.r .cell-code}\nfcast0101\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     Point Forecast    Lo 80    Hi 80    Lo 95    Hi 95\n1626       62.39704 61.74274 63.05135 61.39637 63.39772\n1627       62.41922 61.45258 63.38587 60.94086 63.89758\n1628       62.44125 61.26868 63.61382 60.64795 64.23454\n1629       62.46327 61.11589 63.81065 60.40263 64.52392\n1630       62.48530 60.98331 63.98728 60.18821 64.78238\n1631       62.50732 60.86523 64.14942 59.99596 65.01869\n1632       62.52935 60.75819 64.30050 59.82060 65.23809\n1633       62.55137 60.65994 64.44280 59.65868 65.44406\n1634       62.57340 60.56890 64.57790 59.50778 65.63901\n1635       62.59542 60.48390 64.70695 59.36612 65.82472\n1636       62.61745 60.40407 64.83083 59.23237 66.00252\n1637       62.63947 60.32872 64.95022 59.10548 66.17346\n1638       62.66150 60.25732 65.06568 58.98462 66.33837\n1639       62.68352 60.18941 65.17763 58.86910 66.49794\n1640       62.70555 60.12463 65.28646 58.75838 66.65271\n1641       62.72757 60.06268 65.39246 58.65198 66.80317\n1642       62.74960 60.00330 65.49589 58.54950 66.94969\n1643       62.77162 59.94626 65.59698 58.45060 67.09264\n1644       62.79364 59.89137 65.69592 58.35500 67.23229\n1645       62.81567 59.83847 65.79286 58.26244 67.36890\n1646       62.83769 59.78741 65.88797 58.17269 67.50270\n1647       62.85972 59.73806 65.98137 58.08556 67.63388\n1648       62.88174 59.69031 66.07318 58.00087 67.76262\n1649       62.90377 59.64405 66.16349 57.91846 67.88908\n1650       62.92579 59.59919 66.25239 57.83820 68.01339\n1651       62.94782 59.55565 66.33998 57.75995 68.13569\n1652       62.96984 59.51336 66.42633 57.68360 68.25608\n1653       62.99187 59.47223 66.51150 57.60905 68.37468\n1654       63.01389 59.43223 66.59556 57.53621 68.49158\n1655       63.03592 59.39327 66.67856 57.46498 68.60686\n1656       63.05794 59.35533 66.76056 57.39528 68.72061\n1657       63.07997 59.31833 66.84160 57.32705 68.83289\n1658       63.10199 59.28225 66.92173 57.26021 68.94378\n1659       63.12402 59.24704 67.00099 57.19470 69.05333\n1660       63.14604 59.21267 67.07942 57.13047 69.16162\n1661       63.16807 59.17909 67.15704 57.06745 69.26868\n1662       63.19009 59.14627 67.23391 57.00561 69.37458\n1663       63.21212 59.11419 67.31004 56.94488 69.47935\n1664       63.23414 59.08282 67.38547 56.88524 69.58304\n1665       63.25617 59.05212 67.46021 56.82663 69.68570\n1666       63.27819 59.02207 67.53431 56.76902 69.78736\n1667       63.30022 58.99266 67.60777 56.71238 69.88805\n1668       63.32224 58.96385 67.68063 56.65666 69.98782\n1669       63.34426 58.93563 67.75290 56.60184 70.08669\n1670       63.36629 58.90797 67.82461 56.54788 70.18470\n1671       63.38831 58.88086 67.89576 56.49476 70.28186\n1672       63.41034 58.85429 67.96639 56.44246 70.37822\n1673       63.43236 58.82822 68.03651 56.39093 70.47379\n1674       63.45439 58.80265 68.10613 56.34017 70.56861\n1675       63.47641 58.77757 68.17526 56.29015 70.66268\n1676       63.49844 58.75295 68.24393 56.24084 70.75604\n1677       63.52046 58.72878 68.31214 56.19222 70.84871\n1678       63.54249 58.70506 68.37992 56.14428 70.94070\n1679       63.56451 58.68176 68.44726 56.09699 71.03203\n1680       63.58654 58.65889 68.51419 56.05035 71.12273\n1681       63.60856 58.63641 68.58071 56.00432 71.21281\n1682       63.63059 58.61434 68.64684 55.95889 71.30228\n1683       63.65261 58.59264 68.71258 55.91406 71.39117\n1684       63.67464 58.57132 68.77795 55.86979 71.47948\n1685       63.69666 58.55037 68.84295 55.82609 71.56724\n1686       63.71869 58.52977 68.90760 55.78293 71.65445\n1687       63.74071 58.50952 68.97190 55.74030 71.74113\n1688       63.76274 58.48961 69.03586 55.69818 71.82729\n1689       63.78476 58.47003 69.09949 55.65658 71.91294\n1690       63.80679 58.45077 69.16280 55.61547 71.99811\n1691       63.82881 58.43183 69.22579 55.57484 72.08278\n1692       63.85084 58.41319 69.28848 55.53468 72.16699\n1693       63.87286 58.39486 69.35086 55.49499 72.25073\n1694       63.89489 58.37683 69.41294 55.45574 72.33403\n1695       63.91691 58.35908 69.47474 55.41694 72.41688\n1696       63.93893 58.34161 69.53626 55.37857 72.49930\n1697       63.96096 58.32443 69.59749 55.34062 72.58129\n1698       63.98298 58.30751 69.65846 55.30309 72.66288\n1699       64.00501 58.29086 69.71916 55.26597 72.74405\n1700       64.02703 58.27446 69.77960 55.22924 72.82483\n1701       64.04906 58.25833 69.83979 55.19290 72.90522\n1702       64.07108 58.24244 69.89973 55.15694 72.98523\n1703       64.09311 58.22680 69.95942 55.12136 73.06486\n1704       64.11513 58.21139 70.01887 55.08614 73.14412\n1705       64.13716 58.19623 70.07809 55.05129 73.22303\n1706       64.15918 58.18129 70.13707 55.01679 73.30158\n1707       64.18121 58.16659 70.19583 54.98264 73.37978\n1708       64.20323 58.15210 70.25436 54.94883 73.45764\n1709       64.22526 58.13784 70.31268 54.91535 73.53517\n1710       64.24728 58.12378 70.37078 54.88220 73.61236\n1711       64.26931 58.10995 70.42867 54.84938 73.68924\n1712       64.29133 58.09631 70.48635 54.81687 73.76580\n1713       64.31336 58.08289 70.54383 54.78467 73.84204\n1714       64.33538 58.06966 70.60110 54.75278 73.91798\n1715       64.35741 58.05663 70.65818 54.72120 73.99361\n1716       64.37943 58.04379 70.71507 54.68991 74.06895\n1717       64.40146 58.03115 70.77176 54.65891 74.14400\n1718       64.42348 58.01869 70.82827 54.62820 74.21876\n1719       64.44551 58.00642 70.88459 54.59777 74.29324\n1720       64.46753 57.99433 70.94074 54.56762 74.36744\n1721       64.48956 57.98241 70.99670 54.53774 74.44137\n1722       64.51158 57.97068 71.05248 54.50813 74.51503\n1723       64.53360 57.95911 71.10810 54.47879 74.58842\n1724       64.55563 57.94772 71.16354 54.44971 74.66155\n1725       64.57765 57.93650 71.21881 54.42088 74.73443\n1726       64.59968 57.92544 71.27392 54.39231 74.80705\n1727       64.62170 57.91454 71.32886 54.36399 74.87942\n1728       64.64373 57.90381 71.38365 54.33591 74.95155\n1729       64.66575 57.89323 71.43827 54.30808 75.02343\n1730       64.68778 57.88281 71.49274 54.28048 75.09507\n1731       64.70980 57.87255 71.54706 54.25312 75.16648\n1732       64.73183 57.86243 71.60122 54.22600 75.23766\n1733       64.75385 57.85247 71.65524 54.19910 75.30861\n1734       64.77588 57.84265 71.70910 54.17243 75.37933\n1735       64.79790 57.83298 71.76282 54.14598 75.44983\n1736       64.81993 57.82345 71.81640 54.11975 75.52011\n1737       64.84195 57.81407 71.86984 54.09373 75.59017\n1738       64.86398 57.80482 71.92313 54.06793 75.66002\n1739       64.88600 57.79571 71.97629 54.04234 75.72966\n1740       64.90803 57.78674 72.02931 54.01696 75.79909\n1741       64.93005 57.77790 72.08220 53.99179 75.86832\n1742       64.95208 57.76920 72.13495 53.96681 75.93734\n1743       64.97410 57.76062 72.18758 53.94204 76.00616\n1744       64.99613 57.75218 72.24007 53.91747 76.07479\n1745       65.01815 57.74386 72.29244 53.89309 76.14322\n1746       65.04018 57.73567 72.34468 53.86890 76.21145\n1747       65.06220 57.72760 72.39680 53.84490 76.27950\n1748       65.08423 57.71966 72.44879 53.82109 76.34736\n1749       65.10625 57.71184 72.50066 53.79747 76.41503\n1750       65.12827 57.70413 72.55242 53.77403 76.48252\n1751       65.15030 57.69655 72.60405 53.75077 76.54982\n1752       65.17232 57.68908 72.65557 53.72770 76.61695\n1753       65.19435 57.68173 72.70697 53.70479 76.68390\n1754       65.21637 57.67450 72.75825 53.68207 76.75068\n1755       65.23840 57.66737 72.80943 53.65951 76.81728\n1756       65.26042 57.66036 72.86049 53.63713 76.88372\n1757       65.28245 57.65346 72.91144 53.61492 76.94998\n1758       65.30447 57.64667 72.96228 53.59287 77.01608\n1759       65.32650 57.63998 73.01301 53.57099 77.08201\n1760       65.34852 57.63341 73.06364 53.54927 77.14777\n1761       65.37055 57.62694 73.11416 53.52771 77.21338\n1762       65.39257 57.62057 73.16458 53.50632 77.27883\n1763       65.41460 57.61430 73.21489 53.48508 77.34412\n1764       65.43662 57.60814 73.26510 53.46400 77.40925\n1765       65.45865 57.60208 73.31521 53.44307 77.47422\n```\n:::\n\n```{.r .cell-code}\n# fcast0101 %>% \n#   ggplot(aes(x = Lo95, y =))\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../../site_libs/kePrint-0.0.1/kePrint.js\"></script>\r\n<link href=\"../../site_libs/lightable-0.0.1/lightable.css\" rel=\"stylesheet\" />\r\n<link href=\"../../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\r\n<script src=\"../../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}