par(mfrow = c(1,2))
hist(ts_S01_Var01)
boxplot(ts_S01_Var01)
autoplot(ts_S01_Var01)
#| warning: false
data[c(1:7)]%>%
gather(variable, value, -SeriesInd, -group) %>%
ggplot(., aes(value, SeriesInd, color = group)) +
geom_point(fill = "white",
size=1,
shape=21,
alpha = 0.75) +
coord_flip() +
facet_wrap(~variable,
scales ="free") +
labs(title = "Variable Patterns",
subtitle = "Color Coded by Group",
x="Value",
y="Time",
caption = "Contains all non-null observations of the given data set") +
theme_minimal() +
theme(plot.title = element_text(hjust=0.5),
plot.subtitle = element_text(hjust=0.5),
legend.position = "bottom",
axis.ticks.x=element_blank(),
axis.text.x=element_blank(),
plot.caption = element_text(hjust=0.5)
)
#| include: false
ndiffs(ts_S01_Var01)
ts_S01_Var01%>%diff()%>%ndiffs()
# ndiffs test for ts_S01_Var02.
ndiffs(ts_S01_Var02)
ts_S01_Var02%>%diff()%>%ndiffs()
# ndiffs test for ts_S02_Var02
ndiffs(ts_S02_Var02)
ts_S02_Var02%>%diff()%>%ndiffs()
# ndiffs test for ts_S02_Var03.
ndiffs(ts_S02_Var03)
ts_S02_Var02%>%diff()%>%ndiffs()
# ndiffs test for ts_S03_Var05.
ndiffs(ts_S03_Var05)
ts_S03_Var05%>%diff()%>%ndiffs()
# ndiffs test for ts_S03_Var07.
ndiffs(ts_S03_Var07)
ts_S03_Var07%>%diff()%>%ndiffs()
# According to the ndiffs test, all the variables above require difference.
#| include: false
train0101<-window(ts_S01_Var01, end=as.integer(length(ts_S01_Var01)*0.7))
train0102<-window(ts_S01_Var02, end=as.integer(length(ts_S01_Var02)*0.7))
train0202<-window(ts_S02_Var02, end=as.integer(length(ts_S02_Var02)*0.7))
train0203<-window(ts_S02_Var03, end=as.integer(length(ts_S02_Var03)*0.7))
train0305<-window(ts_S03_Var05, end=as.integer(length(ts_S03_Var05)*0.7))
train0307<-window(ts_S03_Var07, end=as.integer(length(ts_S03_Var07)*0.7))
length(ts_S01_Var01)*0.3
# library(dplyr)
# library(forecast)
AA_fit0101 <- train0101 %>% auto.arima(stepwise = FALSE, approximation =FALSE, seasonal = TRUE) %>% forecast(h=488)
AA_fit0102 <- train0102 %>% auto.arima(stepwise = FALSE, approximation =FALSE, seasonal = TRUE) %>% forecast(h=488)
AA_fit0202 <- train0202 %>% auto.arima(stepwise = FALSE, approximation =FALSE, seasonal = TRUE) %>% forecast(h=488)
AA_fit0203 <- train0203 %>% auto.arima(stepwise = FALSE, approximation =FALSE, seasonal = TRUE) %>% forecast(h=488)
AA_fit0305 <- train0305 %>% auto.arima(stepwise = FALSE, approximation =FALSE, seasonal = TRUE) %>% forecast(h=488)
AA_fit0307 <- train0307 %>% auto.arima(stepwise = FALSE, approximation =FALSE, seasonal = TRUE) %>% forecast(h=488)
mape0101<-accuracy(AA_fit0101,ts_S01_Var01)["Test set", "MAPE"]
mape0101
mape0102<-accuracy(AA_fit0102,ts_S01_Var02)["Test set","MAPE"]
mape0102
mape0202<-accuracy(AA_fit0202,ts_S02_Var02)["Test set", "MAPE"]
mape0202
mape0203<-accuracy(AA_fit0203,ts_S02_Var03)["Test set", "MAPE"]
mape0203
mape0305<-accuracy(AA_fit0305,ts_S03_Var05)["Test set", "MAPE"]
mape0101
mape0307<-accuracy(AA_fit0307,ts_S03_Var07)["Test set", "MAPE"]
mape0307
AA0101<-auto.arima(ts_S01_Var01, stepwise = F, approximation = F, seasonal = T)
fcast0101<-forecast(AA0101,h=140)
plot(fcast0101)
AA0102<-auto.arima(ts_S01_Var02, stepwise = F, approximation = F, seasonal = T)
fcast0102<-forecast(AA0102,h=140)
plot(fcast0102)
AA0202<-auto.arima(ts_S02_Var02, stepwise = F, approximation = F, seasonal = T)
fcast0202<-forecast(AA0202,h=140)
plot(fcast0202)
AA0203<-auto.arima(ts_S02_Var03, stepwise = F, approximation = F, seasonal = T)
fcast0203<-forecast(AA0203,h=140)
plot(fcast0203)
AA0305<-auto.arima(ts_S03_Var05, stepwise = F, approximation = F, seasonal = T)
fcast0305<-forecast(AA0305,h=140)
plot(fcast0305)
AA0307<-auto.arima(ts_S03_Var07, stepwise = F, approximation = F, seasonal = T)
fcast0307<-forecast(AA0307,h=140)
plot(fcast0307)
fcast0101
fcast0102
fcast0202
fcast0203
fcast0305
fcast0307
S0101 <- fcast0101$mean
S0102 <- fcast0102$mean
S0202 <- fcast0202$mean
S0203 <- fcast0203$mean
S0305 <- fcast0305$mean
S0307 <- fcast0307$mean
S0101_preds <- S0101[1:140]
S0102_preds <- S0102[1:140]
S0202_preds <- S0202[1:140]
S0203_preds <- S0203[1:140]
S0305_preds <- S0305[1:140]
S0307_preds <- S0307[1:140]
csv <- data.frame(cbind(S0101_preds, S0102_preds, S0202_preds, S0203_preds,S0305_preds, S0307_preds))
# write.csv(csv, file = "C:/data/csv.csv")
plot(fcast0101)
setwd("C:/Users/Zachary Palmore/GitHub/showcase")
knitr::opts_chunk$set(include=T, echo = F, warning=F, message=F)
#| include: false
# Packages
library(tidyverse)
library(kableExtra)
library(fpp2)
library(imputeTS)
library(forecast)
library(readxl)
library(fma)
library(tsoutliers)
library(psych)
library(kableExtra)
library(zoo)
library(xts)
library(urca)
library(ROCR)
library(TSstudio)
library(stringr)
# Data source
data <- read.csv("https://raw.githubusercontent.com/palmorezm/msds/main/Predictive%20Analytics/Projects/Project1/project1data.csv")
# data <- data %>%
#   rename(SeriesInd = Ã¯..SeriesInd)
head(data, 5)
# Chart
varsbygroup <- data.frame(matrix(c("S01", "S02", "S03",
"S04", "S05", "S06",
"Var01", "Var02", "Var05",
"Var01", "Var02", "Var05",
"Var02", "Var03", "Var07",
"Var02", "Var03", "Var07"),
nrow = 6, ncol=3))
colnames(varsbygroup) <- c("Group", "Variable1", "Variable2")
varsbygroup %>%
kbl(booktabs = T) %>%
kable_styling(latex_options = c("striped", "HOLD_position", "scale_down"), full_width = T)
# Grouping
S01 <- data %>%
filter(group == "S01")
S02 <- data %>%
filter(group == "S02")
S03 <- data %>%
filter(group == "S03")
S04 <- data %>%
filter(group == "S04")
S05 <- data %>%
filter(group == "S05")
S06 <- data %>%
filter(group == "S06")
# Imputation by function - missing something? lapply/sapply may work
soximp <- function(df){
for (i in colnames(df)){
if (sum(is.na(df[[i]])) !=0){
df[[i]][is.na(df[[i]])] <- median(df[[i]], na.rm=TRUE)
}
}
}
# Imputation loops for each group by median
for (i in colnames(S01)){
if (sum(is.na(S01[[i]])) != 0){
S01[[i]][is.na(S01[[i]])] <- median(S01[[i]], na.rm = TRUE)
}
}
for (i in colnames(S02)){
if (sum(is.na(S02[[i]])) != 0){
S02[[i]][is.na(S02[[i]])] <- median(S02[[i]], na.rm = TRUE)
}
}
for (i in colnames(S03)){
if (sum(is.na(S03[[i]])) != 0){
S03[[i]][is.na(S03[[i]])] <- median(S03[[i]], na.rm = TRUE)
}
}
for (i in colnames(S04)){
if (sum(is.na(S04[[i]])) != 0){
S04[[i]][is.na(S04[[i]])] <- median(S04[[i]], na.rm = TRUE)
}
}
for (i in colnames(S05)){
if (sum(is.na(S05[[i]])) != 0){
S05[[i]][is.na(S05[[i]])] <- median(S05[[i]], na.rm = TRUE)
}
}
for (i in colnames(S06)){
if (sum(is.na(S06[[i]])) != 0){
S06[[i]][is.na(S06[[i]])] <- median(S06[[i]], na.rm = TRUE)
}
}
# library(fpp2)
#S01
S01<-subset(data, group == "S01", select = c(SeriesInd, Var01, Var02))%>%
mutate(date=as.Date(SeriesInd, origin = "1905-01-01"))
summary(S01)
# Subset Var01 and Var02 from S01.
S01_Var01<-S01 %>%select(Var01)
S01_Var01<-S01_Var01[1:1625,]
S01_Var02<-S01 %>%select(Var02)
S01_Var02<-S01_Var02[1:1625,]
#S02
S02<-subset(data, group == "S02", select = c(SeriesInd, Var02, Var03))%>%
mutate(date=as.Date(SeriesInd, origin = "1905-01-01"))
summary(S02)
# Subset Var02 and Var03 from S02.
S02_Var02<-S02 %>%select(Var02)
S02_Var02<-S02_Var02[1:1625,]
S02_Var03<-S02 %>%select(Var03)
S02_Var03<-S02_Var03[1:1625,]
#S03
S03<-subset(data, group == "S03", select = c(SeriesInd, Var05, Var07))%>%
mutate(date=as.Date(SeriesInd, origin = "1905-01-01"))
summary(S03)
# Subset Var05 and Var07 from S03.
S03_Var05<-S03 %>%select(Var05)
S03_Var05<-S03_Var05[1:1625,]
S03_Var07<-S03 %>%select(Var07)
S03_Var07<-S03_Var07[1:1625,]
#| include: false
# library(imputeTS)
# Summarize the subset data.
summary(S01_Var01)
summary(S01_Var02)
summary(S02_Var02)
summary(S02_Var03)
summary(S03_Var07)
summary(S03_Var05)
# according to the summary of subsets,
# S01_Var01 has 5 NAs
# S01_Var02 has 3 NAs
# S02_Var02 has 3 NAs
# S02_Var03 has 7 NAs
# S03_Var07 has 7 NAs
# S03_Var05 has 7 NAs
# Using Kalman Smoothing to impute NAs.
S01_Var01<-na_kalman(S01_Var01)
S01_Var02<-na_kalman(S01_Var02)
S02_Var02<-na_kalman(S02_Var02)
S02_Var03<-na_kalman(S02_Var03)
S03_Var05<-na_kalman(S03_Var05)
S03_Var07<-na_kalman(S03_Var07)
summary(S01_Var01)
summary(S01_Var02)
summary(S02_Var02)
summary(S02_Var03)
summary(S03_Var07)
summary(S03_Var05)
# NA  no longer exists
ts_S01_Var01<-ts(S01_Var01)
ts_S01_Var02<-ts(S01_Var02)
ts_S02_Var02<-ts(S02_Var02)
ts_S02_Var03<-ts(S02_Var03)
ts_S03_Var05<-ts(S03_Var05)
ts_S03_Var07<-ts(S03_Var07)
str(ts_S01_Var01)
str(ts_S01_Var02)
str(ts_S02_Var02)
str(ts_S02_Var03)
str(ts_S03_Var05)
str(ts_S03_Var07)
autoplot(ts_S01_Var01)
autoplot(ts_S01_Var02)
autoplot(ts_S02_Var02)
autoplot(ts_S02_Var03)
autoplot(ts_S03_Var05)
autoplot(ts_S03_Var07)
par(mfrow = c(1,2))
hist(ts_S01_Var01)
boxplot(ts_S01_Var01)
par(mfrow = c(1,2))
hist(ts_S01_Var02)
boxplot(ts_S01_Var02)
par(mfrow = c(1,2))
hist(ts_S02_Var02)
boxplot(ts_S02_Var02)
par(mfrow = c(1,2))
hist(ts_S02_Var03)
boxplot(ts_S02_Var03)
par(mfrow = c(1,2))
hist(ts_S03_Var05)
boxplot(ts_S03_Var05)
par(mfrow = c(1,2))
hist(ts_S03_Var07)
boxplot(ts_S03_Var07)
summary(S01_Var01)
par(mfrow = c(1,2))
hist(ts_S01_Var01)
boxplot(ts_S01_Var01)
autoplot(ts_S01_Var01)
#| warning: false
data[c(1:7)]%>%
gather(variable, value, -SeriesInd, -group) %>%
ggplot(., aes(value, SeriesInd, color = group)) +
geom_point(fill = "white",
size=1,
shape=21,
alpha = 0.75) +
coord_flip() +
facet_wrap(~variable,
scales ="free") +
labs(title = "Variable Patterns",
subtitle = "Color Coded by Group",
x="Value",
y="Time",
caption = "Contains all non-null observations of the given data set") +
theme_minimal() +
theme(plot.title = element_text(hjust=0.5),
plot.subtitle = element_text(hjust=0.5),
legend.position = "bottom",
axis.ticks.x=element_blank(),
axis.text.x=element_blank(),
plot.caption = element_text(hjust=0.5)
)
#| include: false
ndiffs(ts_S01_Var01)
ts_S01_Var01%>%diff()%>%ndiffs()
# ndiffs test for ts_S01_Var02.
ndiffs(ts_S01_Var02)
ts_S01_Var02%>%diff()%>%ndiffs()
# ndiffs test for ts_S02_Var02
ndiffs(ts_S02_Var02)
ts_S02_Var02%>%diff()%>%ndiffs()
# ndiffs test for ts_S02_Var03.
ndiffs(ts_S02_Var03)
ts_S02_Var02%>%diff()%>%ndiffs()
# ndiffs test for ts_S03_Var05.
ndiffs(ts_S03_Var05)
ts_S03_Var05%>%diff()%>%ndiffs()
# ndiffs test for ts_S03_Var07.
ndiffs(ts_S03_Var07)
ts_S03_Var07%>%diff()%>%ndiffs()
# According to the ndiffs test, all the variables above require difference.
plot(fcast0101)
#| include: false
train0101<-window(ts_S01_Var01, end=as.integer(length(ts_S01_Var01)*0.7))
train0102<-window(ts_S01_Var02, end=as.integer(length(ts_S01_Var02)*0.7))
train0202<-window(ts_S02_Var02, end=as.integer(length(ts_S02_Var02)*0.7))
train0203<-window(ts_S02_Var03, end=as.integer(length(ts_S02_Var03)*0.7))
train0305<-window(ts_S03_Var05, end=as.integer(length(ts_S03_Var05)*0.7))
train0307<-window(ts_S03_Var07, end=as.integer(length(ts_S03_Var07)*0.7))
length(ts_S01_Var01)*0.3
# library(dplyr)
# library(forecast)
AA_fit0101 <- train0101 %>% auto.arima(stepwise = FALSE, approximation =FALSE, seasonal = TRUE) %>% forecast(h=488)
AA_fit0102 <- train0102 %>% auto.arima(stepwise = FALSE, approximation =FALSE, seasonal = TRUE) %>% forecast(h=488)
AA_fit0202 <- train0202 %>% auto.arima(stepwise = FALSE, approximation =FALSE, seasonal = TRUE) %>% forecast(h=488)
AA_fit0203 <- train0203 %>% auto.arima(stepwise = FALSE, approximation =FALSE, seasonal = TRUE) %>% forecast(h=488)
AA_fit0305 <- train0305 %>% auto.arima(stepwise = FALSE, approximation =FALSE, seasonal = TRUE) %>% forecast(h=488)
AA_fit0307 <- train0307 %>% auto.arima(stepwise = FALSE, approximation =FALSE, seasonal = TRUE) %>% forecast(h=488)
mape0101<-accuracy(AA_fit0101,ts_S01_Var01)["Test set", "MAPE"]
mape0101
mape0102<-accuracy(AA_fit0102,ts_S01_Var02)["Test set","MAPE"]
mape0102
mape0202<-accuracy(AA_fit0202,ts_S02_Var02)["Test set", "MAPE"]
mape0202
mape0203<-accuracy(AA_fit0203,ts_S02_Var03)["Test set", "MAPE"]
mape0203
mape0305<-accuracy(AA_fit0305,ts_S03_Var05)["Test set", "MAPE"]
mape0101
mape0307<-accuracy(AA_fit0307,ts_S03_Var07)["Test set", "MAPE"]
mape0307
AA0101<-auto.arima(ts_S01_Var01, stepwise = F, approximation = F, seasonal = T)
fcast0101<-forecast(AA0101,h=140)
plot(fcast0101)
AA0102<-auto.arima(ts_S01_Var02, stepwise = F, approximation = F, seasonal = T)
fcast0102<-forecast(AA0102,h=140)
plot(fcast0102)
AA0202<-auto.arima(ts_S02_Var02, stepwise = F, approximation = F, seasonal = T)
fcast0202<-forecast(AA0202,h=140)
plot(fcast0202)
AA0203<-auto.arima(ts_S02_Var03, stepwise = F, approximation = F, seasonal = T)
fcast0203<-forecast(AA0203,h=140)
plot(fcast0203)
AA0305<-auto.arima(ts_S03_Var05, stepwise = F, approximation = F, seasonal = T)
fcast0305<-forecast(AA0305,h=140)
plot(fcast0305)
AA0307<-auto.arima(ts_S03_Var07, stepwise = F, approximation = F, seasonal = T)
fcast0307<-forecast(AA0307,h=140)
plot(fcast0307)
fcast0101
fcast0102
fcast0202
fcast0203
fcast0305
fcast0307
S0101 <- fcast0101$mean
S0102 <- fcast0102$mean
S0202 <- fcast0202$mean
S0203 <- fcast0203$mean
S0305 <- fcast0305$mean
S0307 <- fcast0307$mean
S0101_preds <- S0101[1:140]
S0102_preds <- S0102[1:140]
S0202_preds <- S0202[1:140]
S0203_preds <- S0203[1:140]
S0305_preds <- S0305[1:140]
S0307_preds <- S0307[1:140]
csv <- data.frame(cbind(S0101_preds, S0102_preds, S0202_preds, S0203_preds,S0305_preds, S0307_preds))
# write.csv(csv, file = "C:/data/csv.csv")
#| include: false
extract <- fcast0101 %>%
as.data.frame() %>%
mutate(Day = seq(1:length(`Hi 95`)))
extract[which(extract$Day == 10),]$`Hi 95`
extract[which(extract$Day == 10),]$`Lo 95`
extract[which(extract$Day == 10),]$`Point Forecast`
txtx90 <- 88
txtx80 <- 74
b1 <- 15
b2 <- 30
b3 <- 60
b4 <- 90
extract[which(extract$Day == b1),]$`Hi 95`
#| warning: false
fcast0101 %>%
as.data.frame() %>%
ggplot(aes(x = seq(1:length(`Hi 95`)))) +
geom_ribbon(aes(ymin=`Lo 95`,ymax=`Hi 95`), fill="forest green", alpha=0.5) +
geom_ribbon(aes(ymin=`Lo 80`,ymax=`Hi 80`), fill="dark green", alpha=0.5) +
geom_line(aes(y = `Hi 95`), color = "grey", size=2, alpha = .5) +
geom_line(aes(y = `Point Forecast`), color = "#000000", size=1, lty = 1, alpha = .5) +
geom_line(aes(y = `Lo 95`), color = "grey", size=2, alpha = .5) +
geom_vline(xintercept = b1, lty = 3) +
geom_vline(xintercept = b2, lty = 3) +
geom_vline(xintercept = b3, lty = 3) +
geom_segment(aes(x = 0, y = extract[which(extract$Day == b1),]$`Hi 95`,
xend = b1, yend = extract[which(extract$Day == b1),]$`Hi 95`), lty = 3) +
geom_segment(aes(x = 0, y = extract[which(extract$Day == b1),]$`Lo 95`,
xend = b1, yend = extract[which(extract$Day == b1),]$`Lo 95`), lty = 3) +
geom_segment(aes(x = 0, y = extract[which(extract$Day == b2),]$`Hi 95`,
xend = b2, yend = extract[which(extract$Day == b2),]$`Hi 95`), lty = 3) +
geom_segment(aes(x = 0, y = extract[which(extract$Day == b2),]$`Lo 95`,
xend = b2, yend = extract[which(extract$Day == b2),]$`Lo 95`), lty = 3) +
geom_segment(aes(x = 0, y = extract[which(extract$Day == b3),]$`Hi 95`,
xend = b3, yend = extract[which(extract$Day == b3),]$`Hi 95`), lty = 3) +
geom_segment(aes(x = 0, y = extract[which(extract$Day == b3),]$`Lo 95`,
xend = b3, yend = extract[which(extract$Day == b3),]$`Lo 95`), lty = 3) +
geom_segment(aes(x = 0, y = extract[which(extract$Day == b4),]$`Hi 95`,
xend = b4, yend = extract[which(extract$Day == b4),]$`Hi 95`), lty = 3) +
geom_segment(aes(x = 0, y = extract[which(extract$Day == b4),]$`Lo 95`,
xend = b4, yend = extract[which(extract$Day == b4),]$`Lo 95`), lty = 3) +
scale_x_continuous(expand = c(0, 0),
limits=c(0,100),
breaks = c(0, b1, b2, b3, b4)) +
scale_y_continuous(expand = c(0, 0),
limits=c(min(fcast0101$lower), max(fcast0101$upper)),
breaks = c(round(fcast0101$mean[[1]], digits = 2),
round(extract[which(extract$Day == b1),]$`Hi 95`, 2),
round(extract[which(extract$Day == b1),]$`Lo 95`, 2),
round(extract[which(extract$Day == b2),]$`Hi 95`, 2),
round(extract[which(extract$Day == b2),]$`Lo 95`, 2),
round(extract[which(extract$Day == b3),]$`Hi 95`, 2),
round(extract[which(extract$Day == b3),]$`Lo 95`, 2),
round(extract[which(extract$Day == b4),]$`Hi 95`, 2),
round(extract[which(extract$Day == b4),]$`Lo 95`, 2))) +
annotate("text", x = 7.5, y =53.9, label = paste0("MAPE =", signif(mape0101, 4))) +
annotate("label",x=txtx90,y=extract[which(extract$Day == txtx90),]$`Point Forecast` + 3.50,
label = "95% Confidence" ) +
annotate("segment", x = txtx90, y = mean(extract$`Point Forecast`) + 4.75,
xend = txtx90,
yend = extract[which(extract$Day == txtx90),]$`Hi 95`,
arrow = arrow(type = "closed", length = unit(0.02, "npc"))) +
annotate("segment", x = txtx90, y = mean(extract$`Point Forecast`) + 3,
xend = txtx90,
yend = extract[which(extract$Day == txtx90),]$`Lo 95`,
arrow = arrow(type = "closed", length = unit(0.02, "npc"))) +
annotate("label",x=txtx80, y=extract[which(extract$Day == txtx90),]$`Point Forecast` - 3.01,
label = "80% Confidence" ) +
annotate("segment", x = txtx80, y = mean(extract$`Point Forecast`) - 1.75,
xend = txtx80,
yend = extract[which(extract$Day == txtx80),]$`Hi 80`,
arrow = arrow(type = "closed", length = unit(0.02, "npc"))) +
annotate("segment", x = txtx80, y = mean(extract$`Point Forecast`) -3.5,
xend = txtx80,
yend = extract[which(extract$Day == txtx80),]$`Lo 80`,
arrow = arrow(type = "closed", length = unit(0.02, "npc"))) +
annotate("label",x=b1 - 7.05, y=mean(extract$`Point Forecast`) + 6,
label = paste("Day 15:", signif(extract[which(extract$Day == b1),]$`Point Forecast`, 4))) +
annotate("segment", x = b1 - 7, y = mean(extract$`Point Forecast`) + 5,
yend = extract[which(extract$Day == b1),]$`Point Forecast`,
xend = b1,
arrow = arrow(type = "closed", length = unit(0.02, "npc")))  +
annotate("label",x=b2 - 5, y=mean(extract$`Point Forecast`) + 9,
label = paste("Day 30:", signif(extract[which(extract$Day == b2),]$`Point Forecast`, 4))) +
annotate("segment", x = b2 - 4, y = mean(extract$`Point Forecast`) + 8.0,
yend = extract[which(extract$Day == b2),]$`Point Forecast`,
xend = b2,
arrow = arrow(type = "closed", length = unit(0.02, "npc")))  +
annotate("label",x=b3 - 10, y=mean(extract$`Point Forecast`) + 11,
label = paste("Day 60:", signif(extract[which(extract$Day == b3),]$`Point Forecast`, 4))) +
annotate("segment", x = b3 - 10, y = mean(extract$`Point Forecast`) + 9.75,
yend = extract[which(extract$Day == b3),]$`Point Forecast`,
xend = b3,
arrow = arrow(type = "closed", length = unit(0.02, "npc"))) +
labs(x = "Day", y = "Value",
title = "Value Estimation is Less Certain with Time",
subtitle = "Stock Market Day-Value Pairs over 100 Days Shows Growth of Uncertainty") +
theme_minimal() + theme(plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5))
